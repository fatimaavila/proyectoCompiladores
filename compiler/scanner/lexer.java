/* The following code was generated by JFlex 1.4.3 on 6/09/22 13:50 */

package scanner;
import static scanner.tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/09/22 13:50 from the specification file
 * <tt>C:/Users/loren/OneDrive/Datos adjuntos de correo electr√≥nico/Documentos/NetBeansProjects/compiproy/src/scanner/lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\27\2\0\1\22\22\0\1\22\1\37\3\0\1\34"+
    "\1\40\1\6\1\45\1\46\1\33\1\32\1\22\1\31\1\50\1\26"+
    "\1\4\11\2\1\0\1\47\1\35\1\30\1\36\2\0\6\3\24\1"+
    "\1\44\1\0\1\7\1\0\1\56\1\0\1\17\1\61\1\11\1\55"+
    "\1\15\1\16\1\53\1\10\1\23\1\1\1\62\1\20\1\54\1\24"+
    "\1\52\1\51\1\63\1\13\1\21\1\12\1\14\1\60\1\25\1\5"+
    "\1\57\1\1\1\42\1\41\1\43\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\11\2\1\5"+
    "\2\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\5\2\1\26\1\27\2\30\3\0\24\26"+
    "\1\31\1\26\1\32\1\26\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\12\26\1\44"+
    "\1\45\13\26\1\0\2\26\1\46\7\26\1\31\13\26"+
    "\1\0\1\47\4\26\1\50\1\51\1\26\1\0\1\52"+
    "\1\0\11\26\1\0\4\26\1\0\1\53\2\26\1\0"+
    "\1\26\3\0\1\26\1\54\1\26\1\0\1\26\1\0"+
    "\1\55\1\56\2\26\1\57\5\26\1\0\3\26\1\60"+
    "\1\0\1\61\1\62\1\0\1\26\4\0\2\26\1\0"+
    "\1\63\1\64\3\0\5\26\1\0\3\26\1\0\1\65"+
    "\1\26\4\0\1\66\1\26\1\67\4\0\1\70\1\26"+
    "\1\0\1\26\1\0\1\71\1\0\1\26\1\0\1\72"+
    "\5\0\1\73\1\0\1\74\2\0\1\75\1\0\1\26"+
    "\5\0\1\76\2\0\1\77\3\0\1\100\1\101\1\0"+
    "\1\102\11\0\1\103\7\0\1\104\1\0\1\105\1\0"+
    "\1\106\1\107\1\110\1\111\2\0\1\112\2\0\1\113"+
    "\2\0\1\114\1\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\64\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\64"+
    "\0\64\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\64\0\64"+
    "\0\u057c\0\64\0\64\0\64\0\64\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\150\0\u06b4\0\234\0\320\0\u06e8\0\u071c"+
    "\0\u0104\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\150\0\u0b60\0\150"+
    "\0\u0b94\0\u0bc8\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\64\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\150\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\150"+
    "\0\150\0\u1624\0\u1658\0\150\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\u1930\0\u1964\0\u1998\0\150\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\150\0\u1b6c\0\u1ba0"+
    "\0\u1bd4\0\u1c08\0\64\0\150\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78"+
    "\0\150\0\u1eac\0\150\0\150\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\150\0\64\0\u20b4"+
    "\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254"+
    "\0\u2288\0\u22bc\0\u22f0\0\u2324\0\64\0\u2358\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\u245c\0\u2490\0\64\0\u24c4\0\u24f8\0\u252c"+
    "\0\u2560\0\150\0\u2594\0\u25c8\0\u25fc\0\u2630\0\150\0\u2664"+
    "\0\u2698\0\u26cc\0\150\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0"+
    "\0\150\0\u2804\0\64\0\u2838\0\u286c\0\150\0\u28a0\0\u28d4"+
    "\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\64\0\u2a0c\0\u2a40"+
    "\0\64\0\u2a74\0\u2aa8\0\u2adc\0\64\0\64\0\u2b10\0\150"+
    "\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0"+
    "\0\u2ce4\0\64\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\64\0\u2e84\0\64\0\u2eb8\0\64\0\64\0\64"+
    "\0\64\0\u2eec\0\u2f20\0\64\0\u2f54\0\u2f88\0\64\0\u2fbc"+
    "\0\u2ff0\0\64\0\u3024\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\3\1\23\1\24\1\21"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\3\1\47\1\50\1\2\1\3\1\51"+
    "\1\52\2\3\65\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\12\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\2\0\1\55\1\0\1\55\61\0\1\55\1\0\1\56"+
    "\1\57\57\0\1\60\1\0\1\60\1\0\1\60\1\61"+
    "\1\0\12\60\1\0\3\60\23\0\5\60\1\0\5\60"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\5\53"+
    "\1\62\4\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\1\63"+
    "\6\53\1\64\1\65\1\53\1\0\3\53\23\0\1\53"+
    "\1\66\3\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\3\53\1\67\6\53\1\0\3\53"+
    "\23\0\5\53\1\0\1\70\4\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\71\4\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\72\2\0\10\53\1\73\1\53\1\0"+
    "\3\53\23\0\5\53\1\0\4\53\1\74\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\7\53\1\75\2\53"+
    "\1\0\1\76\2\53\23\0\1\53\1\77\3\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\3\53\1\100\4\53\1\101\1\102\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\1\103\2\53\23\0\1\53"+
    "\1\104\3\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\2\53\1\105\7\53\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\22\0\1\21\4\0\1\21"+
    "\35\0\1\53\1\54\1\53\1\54\1\53\2\0\6\53"+
    "\1\106\3\53\1\0\1\53\1\107\1\53\23\0\4\53"+
    "\1\110\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\1\111\11\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\26\0\1\112\65\0\1\113\63\0\1\114"+
    "\63\0\1\115\63\0\1\116\63\0\1\117\63\0\1\120"+
    "\73\0\1\121\64\0\1\122\31\0\1\123\55\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\3\53\1\124\6\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\5\53\1\125\4\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\5\53\1\126\4\53"+
    "\1\0\1\127\2\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\7\53\1\130"+
    "\2\53\1\0\3\53\23\0\1\53\1\131\3\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\3\53\1\132\4\53\1\133\1\53\1\0\1\134\2\53"+
    "\23\0\1\53\1\135\3\53\1\0\5\53\1\0\5\54"+
    "\2\0\12\54\1\0\3\54\23\0\5\54\1\0\5\54"+
    "\2\0\3\136\1\57\3\0\1\136\3\0\3\136\35\0"+
    "\1\136\3\0\1\136\3\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\137\1\0\12\60\1\0\3\60\23\0\5\60"+
    "\1\0\5\60\1\0\1\53\1\54\1\53\1\54\1\140"+
    "\2\0\12\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\7\53"+
    "\1\141\2\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\10\53"+
    "\1\142\1\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\7\53"+
    "\1\143\2\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\12\53"+
    "\1\0\1\53\1\144\1\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\4\53"+
    "\1\145\5\53\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\12\53"+
    "\1\0\3\53\23\0\1\146\4\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\2\53\1\147"+
    "\5\53\1\150\1\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\1\151\4\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\11\53"+
    "\1\152\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\5\53\1\153\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\10\53\1\154\1\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\155\4\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\3\53\1\156\6\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\1\157\2\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\12\53\1\0\3\53\23\0\1\160"+
    "\4\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\11\53\1\161\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\2\53\1\162\7\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\1\53\1\163\10\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\3\53\1\164\3\53\1\165\2\53\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\2\53\1\166\7\53\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\12\53\1\0\1\167\2\53\23\0"+
    "\5\53\1\0\5\53\27\112\1\0\34\112\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\12\53\1\0\3\53"+
    "\23\0\1\53\1\170\3\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\2\53\1\171\7\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\1\53\1\172\10\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\12\53\1\0\3\53"+
    "\23\0\2\53\1\173\2\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\3\53\1\174\6\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\12\53\1\0\1\175"+
    "\2\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\176\4\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\3\53\23\0"+
    "\1\53\1\177\3\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\1\53\1\200"+
    "\1\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\3\53\23\0"+
    "\1\53\1\201\3\53\1\0\5\53\2\0\3\136\4\0"+
    "\1\136\3\0\3\136\35\0\1\136\3\0\1\136\3\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\5\53\1\202\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\3\53\1\203\6\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\10\53\1\204\1\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\11\53\1\205\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\2\53\1\206\7\53\1\0\3\53"+
    "\23\0\4\53\1\207\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\210\4\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\211\4\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\4\53\1\212\5\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\3\53\23\0"+
    "\5\53\1\213\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\3\53\1\214\6\53\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\5\53\1\106\4\53\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\52\0\1\215\12\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\11\53\1\216\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\10\53\1\217\1\53\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\2\53\1\220\7\53\1\0\3\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\1\221\11\53\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\1\222\2\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\5\53\1\223\4\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\7\53\1\224\2\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\12\53\1\0\1\225\2\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\2\53\1\226\7\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\5\53\1\227\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\10\53\1\152"+
    "\1\53\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\2\53\1\230\2\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\1\231\11\53"+
    "\1\0\3\53\23\0\5\53\1\0\5\53\1\0\1\53"+
    "\1\54\1\53\1\54\1\53\2\0\12\53\1\0\1\232"+
    "\2\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\1\233\2\53"+
    "\23\0\5\53\1\0\5\53\1\0\1\53\1\54\1\53"+
    "\1\54\1\53\2\0\12\53\1\0\3\53\23\0\5\53"+
    "\1\234\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\12\53\1\0\3\53\23\0\4\53\1\235\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\7\53\1\236\2\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\1\53\1\237\10\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\5\53\1\240\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\10\53\1\241"+
    "\1\53\1\0\3\53\23\0\5\53\1\0\5\53\20\0"+
    "\1\242\34\0\1\243\7\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\244"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\1\53\1\245\3\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\11\53\1\246\1\0\3\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\12\53"+
    "\1\0\1\247\2\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\5\53\1\250\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\3\53\1\251\6\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\52\0\1\252\62\0"+
    "\1\253\13\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\5\53\1\254\4\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\4\53\1\255\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\1\256"+
    "\11\53\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\7\53\1\257"+
    "\2\53\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\2\53\1\260\2\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\3\53\1\261"+
    "\6\53\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\2\53\1\262"+
    "\7\53\1\0\3\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\1\53\1\263\1\53\23\0\5\53\1\0\5\53\1\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\5\53\1\264"+
    "\4\53\1\0\3\53\23\0\5\53\1\0\5\53\20\0"+
    "\1\265\44\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\3\53\1\266\6\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\1\53\1\267\3\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\3\53\23\0\3\53\1\270\1\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\2\53\1\271\7\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\55\0\1\272\7\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\0"+
    "\3\53\1\273\1\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\0"+
    "\3\53\1\274\1\53\52\0\1\275\12\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\5\53\1\276\4\53\1\0"+
    "\3\53\23\0\5\53\1\277\5\53\23\0\1\300\63\0"+
    "\1\301\60\0\1\302\44\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\4\53\1\303\5\53\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\1\53\1\304\1\53\23\0"+
    "\5\53\1\0\5\53\52\0\1\305\12\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\1\53\1\306"+
    "\1\53\23\0\5\53\1\0\5\53\51\0\1\307\13\0"+
    "\1\53\1\54\1\53\1\54\1\53\2\0\12\53\1\0"+
    "\3\53\23\0\5\53\1\310\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\3\53\23\0"+
    "\5\53\1\311\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\312"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\1\53\1\313\1\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\7\53\1\314\2\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\1\315\2\53\23\0\5\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\12\53"+
    "\1\0\3\53\23\0\2\53\1\316\2\53\1\0\5\53"+
    "\1\0\1\53\1\54\1\53\1\54\1\53\2\0\12\53"+
    "\1\0\3\53\23\0\3\53\1\317\1\53\1\0\5\53"+
    "\23\0\1\320\41\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\7\53\1\321\2\53\1\0\3\53\23\0\5\53"+
    "\1\0\5\53\1\0\1\53\1\54\1\53\1\54\1\53"+
    "\2\0\12\53\1\0\3\53\23\0\4\53\1\322\1\0"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\7\53\1\323\2\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\15\0\1\324\117\0\1\325\13\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\7\53\1\326\2\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\20\0\1\327\55\0"+
    "\1\330\124\0\1\331\33\0\1\332\41\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\2\53\1\333\7\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\1\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\4\53\1\334\5\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\51\0\1\335\67\0"+
    "\1\336\60\0\1\337\35\0\1\340\40\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\12\53\1\0\3\53\23\0"+
    "\5\53\1\341\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\10\53\1\342\1\53\1\0\3\53\23\0"+
    "\5\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\1\53\1\343"+
    "\3\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\344"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\5\53\1\345\4\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\12\0\1\346\52\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\3\53\1\347"+
    "\1\53\1\0\5\53\1\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\350"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\10\53\1\351\1\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\11\0\1\352\53\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\1\53\1\353\1\53\23\0"+
    "\5\53\1\0\5\53\23\0\1\354\55\0\1\355\71\0"+
    "\1\356\52\0\1\357\52\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\360"+
    "\5\53\1\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\5\53\1\361\4\53\1\0\3\53\23\0\5\53\1\0"+
    "\5\53\15\0\1\362\117\0\1\363\26\0\1\364\121\0"+
    "\1\365\12\0\1\53\1\54\1\53\1\54\1\53\2\0"+
    "\12\53\1\0\1\53\1\366\1\53\23\0\5\53\1\0"+
    "\5\53\20\0\1\367\44\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\1\53\1\370\1\53\23\0"+
    "\5\53\1\0\5\53\15\0\1\371\57\0\1\372\12\0"+
    "\1\373\30\0\1\374\7\0\1\53\1\54\1\53\1\54"+
    "\1\53\2\0\12\53\1\0\3\53\23\0\5\53\1\375"+
    "\5\53\20\0\1\376\55\0\1\377\64\0\1\u0100\62\0"+
    "\1\u0101\66\0\1\u0102\65\0\1\u0103\55\0\1\u0104\126\0"+
    "\1\u0105\60\0\1\u0106\35\0\1\u0107\41\0\1\53\1\54"+
    "\1\53\1\54\1\53\2\0\2\53\1\u0108\7\53\1\0"+
    "\3\53\23\0\5\53\1\0\5\53\13\0\1\u0109\67\0"+
    "\1\u010a\63\0\1\u010b\61\0\1\u010c\66\0\1\u010d\60\0"+
    "\1\u010e\65\0\1\u010f\57\0\1\u0110\63\0\1\u0111\70\0"+
    "\1\u0112\55\0\1\u0113\70\0\1\u0114\64\0\1\u0115\117\0"+
    "\1\u0116\20\0\1\u0117\75\0\1\u0118\53\0\1\u0119\70\0"+
    "\1\u011a\62\0\1\u011b\117\0\1\u011c\25\0\1\u011d\66\0"+
    "\1\u011e\63\0\1\u011f\60\0\1\u0120\66\0\1\u0121\55\0"+
    "\1\u0122\70\0\1\u0123\64\0\1\u0124\56\0\1\u0125\65\0"+
    "\1\u0126\66\0\1\u0127\62\0\1\u0128\57\0\1\u0129\70\0"+
    "\1\u012a\62\0\1\u012b\64\0\1\u012c\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\20\1\2\11\5\1\2\11"+
    "\1\1\4\11\11\1\3\0\31\1\11\11\13\1\1\11"+
    "\13\1\1\0\26\1\1\0\10\1\1\0\1\1\1\0"+
    "\11\1\1\0\4\1\1\0\3\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\0\1\11\11\1\1\0\4\1"+
    "\1\0\2\1\1\0\1\1\4\0\2\1\1\0\1\1"+
    "\1\11\3\0\5\1\1\0\3\1\1\0\1\11\1\1"+
    "\4\0\2\1\1\11\4\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\5\0\1\1\1\0"+
    "\1\11\2\0\1\1\1\0\1\1\5\0\1\11\2\0"+
    "\1\11\3\0\2\11\1\0\1\1\11\0\1\11\7\0"+
    "\1\11\1\0\1\11\1\0\4\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return METHOD_DECL;
          }
        case 78: break;
        case 67: 
          { return FIELD_DECL;
          }
        case 79: break;
        case 33: 
          { return AND;
          }
        case 80: break;
        case 60: 
          { return ARITH_OP;
          }
        case 81: break;
        case 63: 
          { return HEX_DIGIT;
          }
        case 82: break;
        case 69: 
          { return CALLOUT_ARG;
          }
        case 83: break;
        case 40: 
          { return TRUE;
          }
        case 84: break;
        case 42: 
          { return EXPR;
          }
        case 85: break;
        case 65: 
          { return ASSIGN_OP;
          }
        case 86: break;
        case 15: 
          { return CORCHETEABIERTO;
          }
        case 87: break;
        case 37: 
          { lexeme=yytext(); return CHAR_LITERAL;
          }
        case 88: break;
        case 54: 
          { return CALLOUT;
          }
        case 89: break;
        case 26: 
          { return ID;
          }
        case 90: break;
        case 49: 
          { return BREAK;
          }
        case 91: break;
        case 2: 
          { lexeme=yytext(); return ALPHA;
          }
        case 92: break;
        case 43: 
          { return VOID;
          }
        case 93: break;
        case 28: 
          { return RESASIG;
          }
        case 94: break;
        case 22: 
          { lexeme=yytext(); return CHAR;
          }
        case 95: break;
        case 18: 
          { return PARENABIERTO;
          }
        case 96: break;
        case 77: 
          { return DECIMAL_LITERAL;
          }
        case 97: break;
        case 62: 
          { return VAR_DECL;
          }
        case 98: break;
        case 5: 
          { /*Ignore*/
          }
        case 99: break;
        case 45: 
          { return EQ_OP;
          }
        case 100: break;
        case 23: 
          { lexeme=yytext(); return ID;
          }
        case 101: break;
        case 9: 
          { return SUMA;
          }
        case 102: break;
        case 66: 
          { return STATEMENT;
          }
        case 103: break;
        case 36: 
          { lexeme=yytext(); return HEX_LITERAL;
          }
        case 104: break;
        case 32: 
          { return DIFERENTE;
          }
        case 105: break;
        case 51: 
          { return RETURN;
          }
        case 106: break;
        case 74: 
          { return CHAR_LITERAL;
          }
        case 107: break;
        case 64: 
          { return ALPHA_NUM;
          }
        case 108: break;
        case 11: 
          { return MOD;
          }
        case 109: break;
        case 10: 
          { return MULTIPLICACION;
          }
        case 110: break;
        case 7: 
          { return ASIGNAR;
          }
        case 111: break;
        case 61: 
          { return LOCATION;
          }
        case 112: break;
        case 1: 
          { return ERROR;
          }
        case 113: break;
        case 20: 
          { return PUNTOYCOMA;
          }
        case 114: break;
        case 41: 
          { return TYPE;
          }
        case 115: break;
        case 76: 
          { return STRING_LITERAL;
          }
        case 116: break;
        case 56: 
          { return LITERAL;
          }
        case 117: break;
        case 30: 
          { return MENORIGUALQ;
          }
        case 118: break;
        case 44: 
          { return CLASS;
          }
        case 119: break;
        case 25: 
          { lexeme=yytext(); return RESERVADAS;
          }
        case 120: break;
        case 50: 
          { return BLOCK;
          }
        case 121: break;
        case 57: 
          { return PROGRAM;
          }
        case 122: break;
        case 48: 
          { return DIGIT;
          }
        case 123: break;
        case 8: 
          { return RESTA;
          }
        case 124: break;
        case 16: 
          { return CORCHETECERRADO;
          }
        case 125: break;
        case 39: 
          { return CHAR;
          }
        case 126: break;
        case 24: 
          { lexeme=yytext(); return DECIMAL_LITERAL;
          }
        case 127: break;
        case 46: 
          { return FALSE;
          }
        case 128: break;
        case 17: 
          { return LLAVEABIERTA;
          }
        case 129: break;
        case 27: 
          { return IGUAL;
          }
        case 130: break;
        case 19: 
          { return PARENCERRADO;
          }
        case 131: break;
        case 70: 
          { return INT_LITERAL;
          }
        case 132: break;
        case 12: 
          { return MENORQ;
          }
        case 133: break;
        case 59: 
          { return CONTINUE;
          }
        case 134: break;
        case 34: 
          { return OR;
          }
        case 135: break;
        case 55: 
          { return COND_OP;
          }
        case 136: break;
        case 35: 
          { return LLAVES;
          }
        case 137: break;
        case 31: 
          { return MAYORIGUALQ;
          }
        case 138: break;
        case 14: 
          { return NOT;
          }
        case 139: break;
        case 21: 
          { return PUNTO;
          }
        case 140: break;
        case 71: 
          { return METHOD_CALL;
          }
        case 141: break;
        case 52: 
          { return REL_OP;
          }
        case 142: break;
        case 47: 
          { return ALPHA;
          }
        case 143: break;
        case 72: 
          { return METHOD_NAME;
          }
        case 144: break;
        case 3: 
          { lexeme=yytext(); return DIGIT;
          }
        case 145: break;
        case 38: 
          { return FOR;
          }
        case 146: break;
        case 29: 
          { return SUMASIG;
          }
        case 147: break;
        case 13: 
          { return MAYORQ;
          }
        case 148: break;
        case 6: 
          { return DIVISION;
          }
        case 149: break;
        case 53: 
          { return BIN_OP;
          }
        case 150: break;
        case 68: 
          { return HEX_LITERAL;
          }
        case 151: break;
        case 75: 
          { return BOOL_LITERAL;
          }
        case 152: break;
        case 4: 
          { return LLAVECERRADA;
          }
        case 153: break;
        case 58: 
          { return BOOLEAN;
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
