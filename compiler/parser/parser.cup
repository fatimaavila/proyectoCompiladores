package cupexample;
import java_cup.runtime.*;

parser code {:
	private MyScanner scanner;
	public parser (MyScanner scanner){
		this.scanner = scanner;
	}
:}
scan with {: return scanner.next_token(); :}
// defining terminals here
// Operadores aritmeticos
terminal        SUMA, RESTAR, MULTIPLICACION, DIVISION, MOD, UMINUS,
				MENORQ, MENORIGUALQ, MAYORQ, MAYORIGUALQ, IGUAL, DIFERENTE;
// Operadores logicos
terminal	    AND, OR, NOT;
// Punto
terminal        PUNTO;
// Tipos
terminal        String INT, DOUBLE, BOOLEAN, STRING;

// Literales
terminal        String DECIMAL;
terminal        String FLOATINGPOINT;
terminal        String BOOL_LITERAL;
terminal        String STRING_LITERAL;
terminal        NULL;

// signs
terminal		CORCHETEABIERTO, CORCHETECERRADO, OPENCLOSEBRACKET, WS, PARENABIERTO,
				PARENCERRADO, LLAVEABIERTA, LLAVECERRADA;
// keywords
terminal        READINTEGER, READLINE, NEW, NEWARRAY, ITOD, DTOI, ITOB, BTOI,
				VOID, CLASS, INTERFACE,
				EXTENDS, IMPLEMENTS, COMA, PUNTOYCOMA, PRIVATE, PROTECTED, PUBLIC, IF, ELSE, WHILE, FOR, RETURN,
				BREAK, CONTINUE, PRINT, ASIGNAR, THIS;
terminal        String IDENTIFIER;

// defining nonterminals
nonterminal     Program, DeclStar, Decl, VariableDecl, Variable, FunctionDecl, Formals, CommaVariables,
				ClassDecl, ClassDeclExtends, ClassDeclImplements, CommaIdentifiers, FieldStar, Field,
				AccessMode, InterfaceDecl, PrototypeStar, Prototype, StmtBlock, InsideStmtBlock, VariableDeclStar, StmtStar,
				Stmt, ExprPrime, IfStmt, ElsePrime, WhileStmt, ForStmt, ReturnStmt, BreakStmt, ContinueStmt, PrintStmt,
				PrintCommaExpr, ActualsCommaExpr, Actuals;
// non-terminals with type
nonterminal     Object Type;
nonterminal     Descriptor LValue;
nonterminal     Descriptor Expr;
nonterminal     CompileTimeDescriptor Constant;
nonterminal     Descriptor Call;

// defining precedences
precedence left     ELSE;
precedence right    ASIGNAR;
precedence left     OR;
precedence left     AND;
precedence left     IGUAL, DIFERENTE;
precedence left     MENORQ, MENORIGUALQ, MAYORQ, MAYORIGUALQ;
precedence left     SUMA, RESTAR;
precedence left     MULTIPLICACION, DIVISION, MOD;
precedence right    NOT, UMINUS;
precedence left     PUNTO, CORCHETEABIERTO;
precedence left     PARENABIERTO;

start with Program;

Program ::=             Decl DeclStar;

DeclStar ::=            Decl DeclStar
						| /*epsilon*/
						;

Decl ::=                VariableDecl
						| FunctionDecl
						| ClassDecl
						| InterfaceDecl
						;

VariableDecl ::=        Variable PUNTOYCOMA;

Variable ::=            Type:type IDENTIFIER:id {:
							if ( ParserPhase.getInstance().getPhase() == 0 ) {
								if ( type instanceof Type ) {
									Type t = (Type) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new Descriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
										int prevCount = (int) SemanticStack.getInstance().popDescriptor();
										SemanticStack.getInstance().pushDescriptor( temp );
										SemanticStack.getInstance().pushDescriptor( id );
										SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
									}
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
								else if ( type instanceof ArrayType ) {
									ArrayType t = (ArrayType) type;
									String name = IDGenerator.getInstance().getNextID();
									Descriptor temp = new ArrayDescriptor( name, t );
									SymbolTable.getInstance().getSymbolTable().addEntry( id, temp );
									if ( ParserHelper.getInstance().insideFunctionFormals ) {
                                        int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                        SemanticStack.getInstance().pushDescriptor( temp );
                                        SemanticStack.getInstance().pushDescriptor( id );
                                        SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                                    }
									CodeGen.getInstance().addToData( name, Type.getMipsType( t ), Integer.toString( 0 ) );
								}
							}
						:}
						;

Type ::=                INT {: RESULT = Type.INT; :}
						| DOUBLE {: RESULT = Type.DOUBLE; :}
						| BOOLEAN {: RESULT = Type.BOOLEAN; :}
						| STRING {: RESULT = Type.STRING; :}
						| IDENTIFIER:e {: RESULT = Type.OBJECT; :}
						| Type:t OPENCLOSEBRACKET {:
							if ( t == Type.INT || t == Type.DOUBLE || t == Type.BOOLEAN
									|| t == Type.STRING || t == Type.OBJECT )
								RESULT = new ArrayType( (Type) t, 1 );
							else if ( t instanceof ArrayType ) {
									ArrayType temp = (ArrayType) t;
									RESULT = new ArrayType( temp.getSubType(), temp.getDimensionCount() + 1 );
								}
						:}
						;

FunctionDecl ::=        Type:t IDENTIFIER:name PARENABIERTO {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry(
										name,
										new FunctionDescriptor(
												name,
												"_" + IDGenerator.getInstance().getNextID(),
												(Type) t
										)
								);
								SymbolTable.getInstance().makeNextAndSwitch( name );
							}
							else if ( phase == 1 ) {
								FunctionDescriptor temp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								CodeGen.getInstance().addToText(
										temp.getFunctionName() + ":\n",
										true
								);
								SymbolTable.getInstance().switchToNext();
							}
							ParserHelper.getInstance().insideFunctionFormals = true;
							SemanticStack.getInstance().pushDescriptor( 0 );
						:}
						Formals {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 ) {
								int formalsCount = (int) SemanticStack.getInstance().popDescriptor();
								for ( int i = 0; i < formalsCount; i++ ) {
									FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
									String argumentName = (String) SemanticStack.getInstance().popDescriptor();
									Descriptor argumentDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
									funcDscp.addArgument( argumentName, argumentDescriptor, true );
								}
							}
							else if ( phase == 1 ) {
								FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
								ParserHelper.getInstance().currentFunctionDscp = funcDscp;
							}
							ParserHelper.getInstance().insideFunctionFormals = false;
						:} PARENCERRADO StmtBlock {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								if ( SymbolTable.getInstance().getSymbolTable().getScopeName().equals( "main" )
										&& SymbolTable.getInstance().getSymbolTable().getEntryCount() == 0
										&& ( (Type) t ) == Type.INT ) {
	                                CodeGen.getInstance().addToText( "# Exit!" );
	                                CodeGen.getInstance().addToText( "li $v0, 10" );
	                                CodeGen.getInstance().addToText( "syscall" );
	                                CodeGen.getInstance().addEmptyLine();
	                                CodeGen.getInstance().addEmptyLine();
                                }
                                else {
                                    CodeGen.getInstance().addToText( "# returning from function " + name );
                                    CodeGen.getInstance().addToText( "jr $ra" );
                                    CodeGen.getInstance().addEmptyLine();
                                }
							}
							SymbolTable.getInstance().goBack();
						:}
						| VOID IDENTIFIER:name PARENABIERTO {:
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 ) {
                                SymbolTable.getInstance().getSymbolTable().addEntry(
                                        name,
                                        new FunctionDescriptor(
                                                name,
                                                "_" + IDGenerator.getInstance().getNextID(),
                                                Type.VOID
                                        )
                                );
                                SymbolTable.getInstance().makeNextAndSwitch( name );
                            }
                            else if ( phase == 1 ) {
                                FunctionDescriptor temp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                CodeGen.getInstance().addToText(
                                        temp.getFunctionName() + ":\n",
                                        true
                                );
                                SymbolTable.getInstance().switchToNext();
                            }
                            ParserHelper.getInstance().insideFunctionFormals = true;
                            SemanticStack.getInstance().pushDescriptor( 0 );
						:} Formals {:
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 0 ) {
                                int formalsCount = (int) SemanticStack.getInstance().popDescriptor();
                                for ( int i = 0; i < formalsCount; i++ ) {
                                    FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                    String argumentName = (String) SemanticStack.getInstance().popDescriptor();
                                    Descriptor argumentDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                    funcDscp.addArgument( argumentName, argumentDescriptor, true );
                                }
                            }
                            else if ( phase == 1 ) {
                                FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( name );
                                ParserHelper.getInstance().currentFunctionDscp = funcDscp;
                            }
                            ParserHelper.getInstance().insideFunctionFormals = false;
						:} PARENCERRADO StmtBlock {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                CodeGen.getInstance().addToText( "# returning from function " + name );
                                CodeGen.getInstance().addToText( "jr $ra" );
                                CodeGen.getInstance().addEmptyLine();
                            }
                            SymbolTable.getInstance().goBack();
						:}
						;

Formals ::=             Variable:v CommaVariables
						| /*epsilon*/
						;
CommaVariables ::=      COMA Variable CommaVariables
						| /*epsilon*/
						;

ClassDecl ::=           CLASS IDENTIFIER ClassDeclExtends ClassDeclImplements LLAVEABIERTA FieldStar LLAVECERRADA;
ClassDeclExtends ::=    EXTENDS IDENTIFIER
						| /*epsilon*/
						;
ClassDeclImplements ::= IMPLEMENTS IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
CommaIdentifiers ::=    COMA IDENTIFIER CommaIdentifiers
						| /*epsilon*/
						;
FieldStar ::=           Field FieldStar
						| /*epsilon*/
						;

Field ::=               AccessMode VariableDecl
						| AccessMode FunctionDecl
						;

AccessMode ::=          PRIVATE
						| PROTECTED
						| PUBLIC
						| /*epsilon*/
						;

InterfaceDecl ::=       INTERFACE IDENTIFIER LLAVEABIERTA PrototypeStar LLAVECERRADA;
PrototypeStar ::=       Prototype PrototypeStar
						| /*epsilon*/
						;

Prototype ::=           Type IDENTIFIER PARENABIERTO Formals PARENCERRADO PUNTOYCOMA
						| VOID IDENTIFIER PARENABIERTO Formals PARENCERRADO PUNTOYCOMA
						;

StmtBlock ::=           LLAVEABIERTA {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 0 )
								SymbolTable.getInstance().makeNextAndSwitch();
							else if ( phase == 1 )
								SymbolTable.getInstance().switchToNext();
						:} InsideStmtBlock {:
							SymbolTable.getInstance().goBack();
						:} LLAVECERRADA;
InsideStmtBlock ::=     VariableDecl InsideStmtBlock
						| StmtStar
						;
StmtStar ::=            Stmt StmtStar
						| /*epsilon*/
						;

Stmt ::=                ExprPrime PUNTOYCOMA
						| IfStmt
						| WhileStmt
						| ForStmt
						| BreakStmt
						| ContinueStmt
						| ReturnStmt
						| PrintStmt
						| StmtBlock
						;

ExprPrime ::=           Expr:e {: RESULT = e; :}
						| /*epsilon*/
						;

IfStmt ::=              IF PARENABIERTO Expr:e{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                IfCodeGen.getInstance().cgen();
                            }
                        :} PARENCERRADO Stmt ElsePrime
                        ;

ElsePrime ::=           ELSE{:
                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
                                String elseLabel = (String)LabelStack.getInstance().popLabel();
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText("b " + endLabel);
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                                LabelStack.getInstance().pushLabel("if", endLabel);
                            }
                        :} Stmt:s {:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText(endLabel + ":\n", true);
                            }
                        :}
						| /*epsilon*/ {:
						    int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String elseLabel = (String)LabelStack.getInstance().popLabel();
                                String endLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText(elseLabel + ":\n", true);
                            }
                        :}
                        ;


WhileStmt ::=           WHILE {:
                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
                                String whileLabel = "_loop_cond_while_" + "_" + IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("while", whileLabel);
                                CodeGen.getInstance().addToText(whileLabel + ":\n", true);
                            }
                        :}PARENABIERTO Expr:e{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor(e);
                                WhileCodeGen.getInstance().cgen();
                            }
                        :} PARENCERRADO Stmt:s{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endWhileLabel = (String)LabelStack.getInstance().popLabel();
                                String whileLabel = (String)LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText("b " + whileLabel);
                                CodeGen.getInstance().addToText(endWhileLabel + ":\n", true);
                            }
                        :};

ForStmt ::=             FOR PARENABIERTO ExprPrime{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String exprFor = "_loop_cond_for_" + IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("for", exprFor);
                                CodeGen.getInstance().addToText(exprFor + ":\n", true);
                            }
                        :} PUNTOYCOMA Expr:e{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if (phase == 1){
                                SemanticStack.getInstance().pushDescriptor(e);
                                ForCodeGen.getInstance().cgen();
                                String blockFor = "_for_block_" + IDGenerator.getInstance().getNextID();
                                String forStmt = "_for_stmt_" + IDGenerator.getInstance().getNextID();
                                LabelStack.getInstance().pushLabel("for", forStmt);
                                LabelStack.getInstance().pushLabel("for",blockFor);
                                CodeGen.getInstance().addToText("b " + blockFor);
                                CodeGen.getInstance().addToText(forStmt + ":\n", true);
                            }
                        :} PUNTOYCOMA ExprPrime {:
                            int phase = ParserPhase.getInstance().getPhase();
                            if (phase == 1){
                                String condFor = LabelStack.getInstance().popLabel("for", 3);
                                CodeGen.getInstance().addToText("b " + condFor);
                                String forBlock = LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText(forBlock + ":\n", true);
                            }
                        :} PARENCERRADO Stmt{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if (phase == 1){
                                String forStmt = LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText("b " + forStmt);
                                String endOfFor = LabelStack.getInstance().popLabel();
                                CodeGen.getInstance().addToText(endOfFor + ":\n", true);
                                LabelStack.getInstance().popLabel();
                            }
                        :};

ReturnStmt ::=          RETURN ExprPrime:e PUNTOYCOMA {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								FunctionDescriptor funcDscp = ParserHelper.getInstance().currentFunctionDscp;
								if ( funcDscp == null )
									throw new InvalidReturnStatement();
								SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionReturnStatement.getInstance().cgen();
							}
						:}
						;

BreakStmt ::=           BREAK {:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String endWhileLabel = (String)LabelStack.getInstance().popLabel(true);
                                CodeGen.getInstance().addToText("b " + endWhileLabel);
                            }
                        :} PUNTOYCOMA;

ContinueStmt ::=        CONTINUE {:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                String whileBegin = (String)LabelStack.getInstance().popLabel(false);
                                CodeGen.getInstance().addToText("b " + whileBegin);
                            }
                        :} PUNTOYCOMA;

PrintStmt ::=           PRINT PARENABIERTO Expr:e
                        {:
                            int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
                        :}
                        PrintCommaExpr PARENCERRADO PUNTOYCOMA
						;

PrintCommaExpr ::=      COMA Expr:e
						{:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								PrintCodeGen.getInstance().cgen();
							}
						:}
						PrintCommaExpr
						|
						/*epsilon*/
						{:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								PrintCodeGen.getInstance().printEnter();
						:}
						;

Expr ::=                LValue:lv ASIGNAR Expr:e {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( lv );
								AssignmentCodeGen.getInstance().cgen();
							}
							RESULT = new Descriptor( "", Type.DUMMY );
						:}
						|
						Constant:c {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SymbolTable.getInstance().getSymbolTable().addEntry( c.getName(), c );
								Type type = c.getType();
								if ( type == Type.INT || type == Type.DOUBLE || type == Type.BOOLEAN )
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										c.getValue().toString()
									);
								else if ( type == Type.STRING_LITERAL ) {
									CodeGen.getInstance().addToData(
										c.getName(),
										Type.getMipsType( type ),
										Integer.toString( c.getValue().toString().length() )
									);
									SemanticStack.getInstance().pushDescriptor( c );
									String_LiteralCodeGen.getInstance().cgen();
								}
							}
							RESULT = c;
						:}
						| LValue:lv {: RESULT = lv; :}
						| THIS
						| Call:c {: RESULT = c; :}
						| PARENABIERTO Expr:e PARENCERRADO {: RESULT = e; :}
						| Expr:e1 SUMA Expr:e2 {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								SumaCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| Expr:e1 RESTAR Expr:e2 {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								RestaCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| Expr:e1 MULTIPLICACION Expr:e2 {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								MultiplicacionCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| Expr:e1 DIVISION Expr:e2 {:
							int phase = ParserPhase.getInstance().getPhase();
							if ( phase == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e1 );
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( "quotient" );
								DivisionCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| Expr:e1 MOD Expr:e2 {:
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                SemanticStack.getInstance().pushDescriptor( "mod" );
                                DivisionCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:}
						| RESTAR Expr:e {:
							int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                UnaryMinusCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:} %prec UMINUS

                        | Expr:e1 MENORQ Expr:e2 {:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                MenorqCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        :}
						| Expr:e1 MENORIGUALQ Expr:e2{:
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 MenorigualqCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         :}
						| Expr:e1 MAYORQ Expr:e2{:
                            int phase = ParserPhase.getInstance().getPhase();
                            if ( phase == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e1 );
                                SemanticStack.getInstance().pushDescriptor( e2 );
                                MayorqCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
                        :}
						| Expr:e1 MAYORIGUALQ Expr:e2{:
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 MayorigualqCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         :}
						| Expr:e1 IGUAL Expr:e2{:
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  IgualCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          :}
						| Expr:e1 DIFERENTE Expr:e2{:
                               int phase = ParserPhase.getInstance().getPhase();
                               if ( phase == 1 ) {
                                   SemanticStack.getInstance().pushDescriptor( e1 );
                                   SemanticStack.getInstance().pushDescriptor( e2 );
                                   DiferenteCodeGen.getInstance().cgen();
                                   Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                   RESULT = temp;
                               }
                           :}
						| Expr:e1 AND Expr:e2{:
                              int phase = ParserPhase.getInstance().getPhase();
                              if ( phase == 1 ) {
                                  SemanticStack.getInstance().pushDescriptor( e1 );
                                  SemanticStack.getInstance().pushDescriptor( e2 );
                                  AndCodeGen.getInstance().cgen();
                                  Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                  RESULT = temp;
                              }
                          :}
						| Expr:e1 OR Expr:e2{:
                             int phase = ParserPhase.getInstance().getPhase();
                             if ( phase == 1 ) {
                                 SemanticStack.getInstance().pushDescriptor( e1 );
                                 SemanticStack.getInstance().pushDescriptor( e2 );
                                 OrCodeGen.getInstance().cgen();
                                 Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                 RESULT = temp;
                             }
                         :}
						| NOT Expr:e {:
                          int phase = ParserPhase.getInstance().getPhase();
                          if ( phase == 1 ) {
                              SemanticStack.getInstance().pushDescriptor( e );
                              NotCodeGen.getInstance().cgen();
                              Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                              RESULT = temp;
                          }
                      :}
						| READINTEGER PARENABIERTO PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								IntegerInputCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| READLINE PARENABIERTO PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
	                            StringInputCodeGen.getInstance().cgen();
	                            Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
	                            RESULT = temp;
							}
						:}
						| NEW IDENTIFIER
						| NEWARRAY PARENABIERTO Expr:e COMA Type:t PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								ValidArraySizeCheckerCodeGen.getInstance().cgen();
								SemanticStack.getInstance().pushDescriptor( e );
								SemanticStack.getInstance().pushDescriptor( t );
								NewArrayCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| ITOD PARENABIERTO Expr:e PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								SemanticStack.getInstance().pushDescriptor( e );
								itodCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						| DTOI PARENABIERTO Expr:e PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                dtoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:}
						| ITOB PARENABIERTO Expr:e PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                itobCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:}
						| BTOI PARENABIERTO Expr:e PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                SemanticStack.getInstance().pushDescriptor( e );
                                btoiCodeGen.getInstance().cgen();
                                Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:}
						;

LValue ::=              IDENTIFIER:id {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = SymbolTable.getInstance().getSymbolTable().getDescriptor( id );
						:}
						| Expr PUNTO IDENTIFIER
						| Expr:e1 CORCHETEABIERTO Expr:e2 CORCHETECERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
//								ParserHelper.getInstance().isLValueArray = true;
								SemanticStack.getInstance().pushDescriptor( e2 );
								SemanticStack.getInstance().pushDescriptor( e1 );
								ArrayGetIndexValueCodeGen.getInstance().cgen();
								Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
								RESULT = temp;
							}
						:}
						;

Call ::=                IDENTIFIER:functionID PARENABIERTO {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								SemanticStack.getInstance().pushDescriptor( 0 );
						:} Actuals PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int actualsCount = (int) SemanticStack.getInstance().popDescriptor();
                                FunctionDescriptor funcDscp = (FunctionDescriptor) SymbolTable.getInstance().getSymbolTable().getDescriptor( functionID );
                                if ( actualsCount != funcDscp.getArgumentCount() )
                                    throw new FunctionInputMismatch( functionID );
                                SaveLocalVariablesCodeGen.getInstance().cgen();
                                for ( int i = 0; i < actualsCount; i++ ) {
                                    Descriptor actualDescriptor = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                    Descriptor formalDescriptor = funcDscp.getArgumentDescriptor( actualsCount - i - 1 );
                                    if ( actualDescriptor.getType() != formalDescriptor.getType() )
                                        throw new FunctionInputMismatch( functionID );
                                    SemanticStack.getInstance().pushDescriptor( i );
                                    SemanticStack.getInstance().pushDescriptor( actualDescriptor );
                                    SemanticStack.getInstance().pushDescriptor( formalDescriptor );
                                    FunctionArgumentCodeGen.getInstance().cgen();
                                }
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionCallCodeGen.getInstance().cgen();
                                SemanticStack.getInstance().pushDescriptor( funcDscp );
                                FunctionValueRetrieveCodeGen.getInstance().cgen();
                                FunctionCallEndedCodeGen.getInstance().cgen();
                                LoadLocalVariablesCodeGen.getInstance().cgen();
                                Descriptor temp = null;
                                if ( funcDscp.getType() != Type.VOID )
                                    temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
                                RESULT = temp;
                            }
						:}
						| Expr:e PUNTO IDENTIFIER:id PARENABIERTO {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
                                SemanticStack.getInstance().pushDescriptor( 0 );
						:} Actuals PARENCERRADO {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int actualsCount = (int) SemanticStack.getInstance().topDescriptor();
								if ( e.getType() == Type.ARRAY && actualsCount == 0 && id.equals( "length" ) ) {
									SemanticStack.getInstance().popDescriptor();
									SemanticStack.getInstance().pushDescriptor( e );
									ArraySizeCodeGen.getInstance().cgen();
									Descriptor temp = (Descriptor) SemanticStack.getInstance().popDescriptor();
									RESULT = temp;
								}
							}
						:}
						;

Actuals ::=             Expr:e {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
                                int prevCount = (int) SemanticStack.getInstance().popDescriptor();
                                SemanticStack.getInstance().pushDescriptor( e );
                                SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						:} ActualsCommaExpr
						| /*epsilon*/
						;

ActualsCommaExpr ::=    COMA Expr:e {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int prevCount = (int) SemanticStack.getInstance().popDescriptor();
	                            SemanticStack.getInstance().pushDescriptor( e );
	                            SemanticStack.getInstance().pushDescriptor( prevCount + 1 );
                            }
						:} ActualsCommaExpr
						| /*epsilon*/
						;

Constant ::=            DECIMAL:d {:
							if ( ParserPhase.getInstance().getPhase() == 1 ) {
								int value;
								if ( d.startsWith( "0x" ) || d.startsWith( "0X" ) )
									value = Integer.parseInt( d.substring( 2 ), 16 );
								else
									value = Integer.parseInt( d );
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.INT,
									value
								);
							}
						:}
						| FLOATINGPOINT:f {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.DOUBLE,
									Float.floatToIntBits( Float.parseFloat( f ) )
								);
						:}
						| BOOL_LITERAL:b {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.BOOLEAN,
									( b.equals( "true" ) ) ? 1 : 0 );
						:}
						| STRING_LITERAL:s {:
							if ( ParserPhase.getInstance().getPhase() == 1 )
								RESULT = new CompileTimeDescriptor(
									"_" + IDGenerator.getInstance().getNextID(),
									Type.STRING_LITERAL,
									s.substring( 1, s.length() - 1 ) + '\0'
								);
						:}
						| NULL:n {: RESULT = new CompileTimeDescriptor( "_" + IDGenerator.getInstance().getNextID(), Type.NULL, 0 ); :}
						;